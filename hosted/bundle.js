/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ (() => {

eval("// Handle response from the fetch request. parseResponse exists\r\n// to prevent parsing a HEAD request\r\nconst handleResponse = async (response, parseResponse) => {\r\n    //Grab the content section so that we can write to it\r\n    const content = document.querySelector('#request-output');\r\n\r\n    let contentHTML = ``;\r\n    contentHTML += `<h3 class='text-center'>`;\r\n\r\n    //Based on the status of the response, write something.\r\n    switch (response.status) {\r\n        case 200:\r\n            contentHTML += `<b>Success</b>`;\r\n            break;\r\n        case 201:\r\n            contentHTML += `<b>Created</b>`;\r\n            break;\r\n        case 204:\r\n            contentHTML += `<b>Updated</b>`;\r\n            break;\r\n        case 400:\r\n            contentHTML += `<b>Bad Request</b>`;\r\n            break;\r\n        default:\r\n            contentHTML += `<b>Not Found</b>`;\r\n            break;\r\n    }\r\n\r\n    contentHTML += `</h3>`;\r\n    content.innerHTML = contentHTML;\r\n\r\n    //If we should parse a response (meaning we made a get request)\r\n    if (parseResponse && response.status !== 204) {\r\n        //Parse the response to json. This is an async function, so we will await it.\r\n        let obj = await response.json();\r\n        console.log(obj);\r\n\r\n        // Don't add \"Message: \" if parsing 200 request\r\n        if (response.status !== 200) {\r\n            content.innerHTML += `<p class=\"text-center\">Message: ${obj.message}</p>`;\r\n        } else {\r\n            //To display the data easily, we will just stringify it again and display it.\r\n            // let jsonString = JSON.stringify(obj.users);\r\n            // content.innerHTML += `<p>${jsonString}</p>`;\r\n\r\n            // Technically, each object result should have one array in it, the\r\n            // names are just different so this avoids having to deal with that\r\n            for (let key in obj) {\r\n                if (obj.hasOwnProperty(key)) {\r\n                    // Get the array of either objects or strings\r\n                    let list = obj[key];\r\n\r\n                    for (let i = 0; i < list.length; i++) {\r\n                        let item = list[i];\r\n\r\n                        // setup columns to be responsive\r\n                        let column = document.createElement('div');\r\n                        column.classList.add('col-2');\r\n                        column.classList.add('col-md-4');\r\n                        column.classList.add('col-xl-3');\r\n\r\n                        let card = document.createElement('div');\r\n                        let cardBody = document.createElement('div');\r\n                        card.classList.add('card');\r\n                        cardBody.classList.add('card-body');\r\n\r\n                        // Check if it's outputting a list of all Pokemon data, or just names\r\n                        if (typeof item === 'object' && item !== null) {\r\n                            // Create image and add it to the card\r\n                            if (item['img']) {\r\n                                let cardImage = document.createElement('img');\r\n                                cardImage.classList.add('card-img-top');\r\n                                cardImage.src = item['img'];\r\n                                card.appendChild(cardImage);\r\n                            }\r\n\r\n                            // Setup head of the card\r\n                            let cardHead = document.createElement('div');\r\n                            cardHead.classList.add('card-header');\r\n                            cardHead.innerHTML = `<b>${item['num']}</b> ${item['name']}`;\r\n                            card.appendChild(cardHead);\r\n\r\n                            let cardBodyHTML = `<ul>`;\r\n\r\n                            let types = item['type'];\r\n                            cardBodyHTML += `<li>Type(s):<ul>`;\r\n\r\n                            for (let j = 0; j < types.length; j++) \r\n                                cardBodyHTML += `<li>${types[j]}</li>`;\r\n\r\n                            cardBodyHTML+= `</ul></li>`;\r\n\r\n                            if (item['height']) cardBodyHTML += `<li>Height: ${item['height']}</li>`;\r\n                            if (item['weight']) cardBodyHTML += `<li>Weight: ${item['weight']}</li>`;\r\n\r\n                            // Iterate through all the Pokemon's weaknesses\r\n                            let weaknesses = item['weaknesses'];\r\n                            if (weaknesses) {\r\n                                cardBodyHTML += `<li>Weaknesses:<ul>`;\r\n\r\n                                for (let j = 0; j < weaknesses.length; j++)\r\n                                    cardBodyHTML += `<li>${weaknesses[j]}</li>`;\r\n\r\n                                cardBodyHTML += `</ul></li>`;\r\n                            }\r\n\r\n                            let nextEvolutions = item['next_evolution'];\r\n                            if (nextEvolutions) {\r\n                                cardBodyHTML += `<li>Next evolution(s):<ol>`;\r\n\r\n                                // Format each simple JSON object as one unordered list element\r\n                                for (let j = 0; j < nextEvolutions.length; j++) {\r\n                                    let evolution = nextEvolutions[j];\r\n                                    cardBodyHTML += `<li>${evolution['num']}: ${evolution['name']}</li>`;\r\n                                }\r\n\r\n                                cardBodyHTML += `</ol></li>`;\r\n                            }\r\n\r\n                            // Assuming user adds tier to the list of properties, this will add it if it exists for the Pokemon\r\n                            let tier = item['tier'];\r\n                            if (tier) cardBodyHTML += `<li>Tier: ${tier}</li>`;\r\n\r\n                            cardBodyHTML += `</ul>`;\r\n                            cardBody.innerHTML = cardBodyHTML;\r\n                        } else {\r\n                            cardBody.innerHTML = item;\r\n                        }\r\n\r\n                        card.appendChild(cardBody);\r\n                        column.appendChild(card);\r\n                        content.appendChild(column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst requestUpdate = async (form, url) => {\r\n    const method = form.querySelector('#method-select').value;\r\n\r\n    let response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n            'Accept': 'application/json'\r\n        },\r\n    });\r\n\r\n    // Check if request should send back a response, or just status code for HEAD\r\n    handleResponse(response, method === 'get');\r\n};\r\n\r\nconst sendPost = async (url, formData) => {\r\n    let response = await fetch(url, {\r\n       method: 'POST',\r\n       headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Accept': 'application/json',\r\n       },\r\n       body: formData,\r\n    });\r\n\r\n    // Once response exists, handle it\r\n    handleResponse(response, true);\r\n};\r\n\r\n// Handles repeated code for getPokemonNames and getPokemon, since they \r\n// function the same, just with different outputs\r\nconst formatSearchRequest = (form, urlPath) => {\r\n    let name = form.querySelector('#pkmnName').value;\r\n    let typeUnformatted = form.querySelector('#pkmnType').value;\r\n    let type = typeUnformatted.split(', ').join(',');\r\n    let id = form.querySelector('#pkmnID').value;\r\n\r\n    // Format url\r\n    let url = `${urlPath}?`;\r\n    if (name) url += `name=${name}`;\r\n    if (type) url += `type=${type}`;\r\n    if (id) url += `id=${id}`;\r\n\r\n    requestUpdate(form, url);\r\n}\r\n\r\nconst init = () => {\r\n    const pkmnNamesForm = document.querySelector('#collapsePokemonNames');\r\n    const pkmnForm = document.querySelector('#collapsePokemon');\r\n    const pkmnNumberForm = document.querySelector('#collapsePokemonNumber');\r\n    const allPkmnForm = document.querySelector('#collapseAllPokemon');\r\n    const addPkmnForm = document.querySelector('#collapseAddPokemon');\r\n\r\n    const getPokemonNames = () => {\r\n        formatSearchRequest(pkmnNamesForm, '/getPokemonNames');\r\n    };\r\n\r\n    const getPokemon = () => {\r\n        formatSearchRequest(pkmnForm, '/getPokemon');\r\n    };\r\n\r\n    const getPokemonByNumber = () => {\r\n        let id = pkmnNumberForm.querySelector('#pkmnID').value;\r\n\r\n        let url = '/getPokemonByNumber?';\r\n        if (id) url += `id=${id}`;\r\n\r\n        requestUpdate(pkmnNumberForm, url);\r\n    };\r\n\r\n    const getAllPokemon = () => {\r\n        requestUpdate(allPkmnForm, '/getAllPokemon');\r\n    };\r\n\r\n    const addPokemon = () => {\r\n        let id = addPkmnForm.querySelector('#pkmnID').value;\r\n        let name = addPkmnForm.querySelector('#pkmnName').value;\r\n        let typeUnformatted = addPkmnForm.querySelector('#pkmnType').value;\r\n        let type = typeUnformatted.split(', ').join(',');\r\n        let img = addPkmnForm.querySelector('#pkmnImg').value;\r\n        let height = addPkmnForm.querySelector('#pkmnHeight').value;\r\n        let weight = addPkmnForm.querySelector('#pkmnWeight').value;\r\n        let weaknessesUnformatted = addPkmnForm.querySelector('#pkmnWeaknesses').value;\r\n        let weaknesses = weaknessesUnformatted.split(', ');\r\n        console.log(weaknesses);\r\n\r\n        let num;\r\n\r\n        // Solution from StackOverflow: https://stackoverflow.com/questions/10841773/javascript-format-number-to-day-with-always-3-digits\r\n        if (id) num = (\"00\" + id).slice(-3);\r\n\r\n        // Put the data into a usable format for POST request\r\n        const formData = `id=${id}&name=${name}&type=${type}&img=${img}&height=${height}&weight=${weight}&weaknesses=${weaknesses}&num=${num}`;\r\n        sendPost('/addPokemon', formData);\r\n    };\r\n\r\n    // GET/HEAD Requests\r\n    pkmnNamesForm.querySelector('#search-btn').addEventListener('click', getPokemonNames);\r\n    pkmnForm.querySelector('#search-btn').addEventListener('click', getPokemon);\r\n    pkmnNumberForm.querySelector('#search-btn').addEventListener('click', getPokemonByNumber);\r\n    allPkmnForm.querySelector('#search-btn').addEventListener('click', getAllPokemon);\r\n    \r\n    // POST Requests\r\n    addPkmnForm.querySelector('#submit-btn').addEventListener('click', addPokemon);\r\n};\r\n\r\nwindow.onload = init;\n\n//# sourceURL=webpack://http_api_two/./client/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/client.js"]();
/******/ 	
/******/ })()
;